AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  AssociatePublicIpAddress:
    Fn::Equals:
    - Ref: AssociatePublicIP
    - 'yes'
Description: Add a ZooKeeper server ASG with one EBS and ENI to your VPC.
Outputs:
  ZooServerASGName:
    Description: Autoscaling Group for Zoo Server.
    Value:
      Ref: ZooServerFleet
  PrivateIp:
    Description: ENI's PrivateIp for the Zoo node.
    Value:
      Fn::GetAtt:
      - ZooENI
      - PrimaryPrivateIpAddress
  PublicIp:
    Condition: AssociatePublicIpAddress
    Description: EIP for the Zoo node.
    Value:
      Ref: ZooEIP
Parameters:
  ASGDesired:
    Default: '1'
    Description: Zoo Server ASG size
    Type: String
  AmiId:
    Description: AMI ID
    Type: String
  AssociatePublicIP:
    AllowedValues:
    - 'yes'
    - 'no'
    ConstraintDescription: must be 'yes' or 'no'
    Default: 'no'
    Description: Indicates whether server receives a public IP address
    Type: String
  ZookeeperRole:
    ConstraintDescription: must be a valid Chef role for Zookeeper.
    Description: Chef Zookeeper role to assign to this instance
    Type: String
  ChefEnvironment:
    Description: Chef environment.
    Type: String
  ChefServerURL:
    Description: Chef-server URL (including organization).
    Type: String
  EBSVolumeType:
    Default: 'gp2'
    Description: Volume Type gp2, io1
    Type: String
  EBSSize:
    Default: '30'
    Description: How big to make the EBS Volume.
    Type: String
  EgressProxyHost:
    Description: Egress proxy host
    Type: String
  EgressProxyPort:
    Description: Egress proxy port
    Type: String
  EumcScriptPath:
    Description: Script to install eumc.
    Type: String
  HostedZoneName:
    Description: Route53 Hosted Zone Name
    Type: String
  InstanceProfile:
    Description: Instance Profile name
    Type: String
  InstanceType:
    Default: m4.large
    Description: Zookeeper Server EC2 instance type
    Type: String
  KeyName:
    AllowedPattern: '[-_ a-zA-Z0-9]*'
    ConstraintDescription: can contain only alphanumeric characters, spaces, dashes
      and underscores.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
      (use bastion KeyPair if available)
    MaxLength: '64'
    MinLength: '1'
    Type: String
  ResourceName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9-_]*'
    Default: ZooServer
    Description: The Logical Resource Name - commonly set by parent stack
    MaxLength: '128'
    MinLength: '1'
    Type: String
  SecretsCmkId:
    Description: ARN of the KMS CMK used to encrypt secrets, reused for chef secrets
    Type: String
  SecretsRPM:
    Description: URL to download Secrets-CLI rpm
    Type: String
  SecretsS3:
    Description: S3 bucket storing Secrets CLI
    Type: String
  SecurityGroups:
    Default: default
    Description: The EC2 security group that this instance belongs to
    Type: CommaDelimitedList
  SubnetIds:
    Description: A single Subnet ID of an existing Public or Private subnet in your
      Virtual Private Cloud (VPC)
    Type: String
  SubnetZone:
    Description: A single Subnet ID zone of an existing Public or Private subnet in
      your Virtual Private Cloud (VPC)
    Type: String
  VpcId:
    Default: vpc-
    Description: Vpc ID of your existing Virtual Private Cloud (VPC)
    Type: String
Resources:
  ZooEBS:
    DeletionPolicy: Delete
    Properties:
      AvailabilityZone:
        Ref: SubnetZone
      Encrypted: 'true'
      KmsKeyId:
        Ref: SecretsCmkId
      Size:
        Ref: EBSSize
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: ResourceName
            - EBS
      VolumeType: 
        Ref: EBSVolumeType
    Type: AWS::EC2::Volume
  ZooEIP:
    Condition: AssociatePublicIpAddress
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  ZooEIPRoute53PublicIp:
    Condition: AssociatePublicIpAddress
    Properties:
      Comment: Route53 A records for ZooEIP Public IP
      HostedZoneName:
        Fn::Join:
        - ''
        - - Ref: HostedZoneName
          - .
      Name:
        Fn::Join:
        - ''
        - - Ref: ResourceName
          - -eip
          - .
          - Ref: HostedZoneName
      ResourceRecords:
        - Ref: ZooEIP
      TTL: '100'
      Type: A
    Type: AWS::Route53::RecordSet
  ZooENI:
    Properties:
      Description: ENI to be attached to instance as static IP.
      GroupSet:
        Ref: SecurityGroups
      SourceDestCheck: 'false'
      SubnetId:
        Ref: SubnetIds
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - - Ref: ResourceName
            - ENI
    Type: AWS::EC2::NetworkInterface
  ZooENIRoute53PrivateIp:
    Properties:
      Comment: Route53 A records for ZooENI Private IP
      HostedZoneName:
        Fn::Join:
        - ''
        - - Ref: HostedZoneName
          - .
      Name:
        Fn::Join:
        - '.'
        - - Ref: ResourceName
          - Ref: HostedZoneName
      ResourceRecords:
        - Fn::GetAtt:
          - ZooENI
          - PrimaryPrivateIpAddress
      TTL: '100'
      Type: A
    Type: AWS::Route53::RecordSet
  ZooServerFleet:
    Properties:
      DesiredCapacity:
        Ref: ASGDesired
      LaunchConfigurationName:
        Ref: ZooServerLaunchConfig
      MaxSize: '2'
      MinSize: '1'
      Tags:
      - Key: Name
        PropagateAtLaunch: 'true'
        Value:
          Ref: ResourceName
      VPCZoneIdentifier:
      - Ref: SubnetIds
    Type: AWS::AutoScaling::AutoScalingGroup
  ZooServerLaunchConfig:
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/chef/client.rb:
              content:
                Fn::Join:
                - ''
                - - chef_server_url "
                  - Ref: ChefServerURL
                  - '"

                    '
                  - 'log_level        :info

                    '
                  - 'log_location     STDOUT

                    '
                  - 'validation_client_name ''fds-qa-validator''

                    '
                  - 'validation_key ''/etc/chef/fds-qa-validator.pem''

                    '
                  - http_proxy "http://
                  - Ref: EgressProxyHost
                  - ':'
                  - Ref: EgressProxyPort
                  - '"

                    '
                  - https_proxy "http://
                  - Ref: EgressProxyHost
                  - ':'
                  - Ref: EgressProxyPort
                  - '"

                    '
                  - 'no_proxy "169.254.169.254,127.0.0.1,.intuit.net"

                    '
                  - 'INSTANCEID=`(curl -s http://169.254.169.254/latest/meta-data/instance-id
                    | sed ''s/^i-//'')`

                    '
                  - node_name "
                  - Ref: ResourceName
                  - '-#{INSTANCEID}"

                    '
              group: root
              mode: '000644'
              owner: root
            /etc/chef/first-boot.json:
              content:
                Fn::Join:
                - ''
                - - '{

                    '
                  - '  "run_list": [

                    '
                  - '    "role[fds_aws]",

                    '
                  - '    "role['
                  - Ref: ZookeeperRole
                  - ']"

                    '
                  - '  ]

                    '
                  - '}'
              group: root
              mode: '000644'
              owner: root
            /etc/profile.d/ec2-egress-proxy.sh:
              content:
                Fn::Join:
                - ''
                - - export http_proxy=http://
                  - Ref: EgressProxyHost
                  - ':'
                  - Ref: EgressProxyPort
                  - '

                    '
                  - export https_proxy=http://
                  - Ref: EgressProxyHost
                  - ':'
                  - Ref: EgressProxyPort
                  - '

                    '
                  - 'export no_proxy=169.254.169.254,127.0.0.1,localhost

                    '
              group: root
              mode: '000644'
              owner: root
          packages:
            yum:
              bind-utils: []
              curl: []
              lvm2: []
              ntp: []
              rsync: []
              screen: []
              telnet: []
              wget: []
      Comment1: Configure the bootstrap helpers to install Zoo servers
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile
      ImageId:
        Ref: AmiId
      InstanceType:
        Ref: InstanceType
      EbsOptimized: 'true'
      KeyName:
        Ref: KeyName
      SecurityGroups:
        Ref: SecurityGroups
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -v
            export http_proxy=http://${EgressProxyHost}:${EgressProxyPort}
            export https_proxy=http://${EgressProxyHost}:${EgressProxyPort}
            export no_proxy=169.254.169.254,127.0.0.1,localhost
            export PATH=$PATH:/opt/aws/bin

            cfn-init -v -s ${AWS::StackName} -r ZooServerLaunchConfig --region ${AWS::Region}
            #/etc/chef/asg-attach-eni.sh
            my_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            if [ "${ZooENI}" != "" ]; then
              /usr/bin/aws ec2 attach-network-interface --network-interface-id ${ZooENI} --instance-id $my_instance_id --device-index 1 --region ${AWS::Region};
              /bin/sleep 10
              if [ ! -e /etc/sysconfig/network-scripts/ifcfg-eth1 ]; then
                cat /etc/sysconfig/network-scripts/ifcfg-eth0 | sed 's/eth0/eth1/g' > /etc/sysconfig/network-scripts/ifcfg-eth1
                # some has " some doesn't have
                sed -i 's/ONBOOT=yes/ONBOOT=no/' /etc/sysconfig/network-scripts/ifcfg-eth0
                sed -i 's/ONBOOT="yes"/ONBOOT="no"/' /etc/sysconfig/network-scripts/ifcfg-eth0
              fi
              /sbin/ifup eth1 && sleep 10 && /sbin/ifdown eth0 && sleep 3
              /sbin/ifconfig -a
              my_eni_ip=`(ip addr show eth1 | grep inet | awk '{print $2}' | sed 's,/.*$,,' | sed 's/\./-/g')`
              my_eni_hostname=${ResourceName}.${HostedZoneName}
              hostnamectl set-hostname $my_eni_hostname
              echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg
            fi

            echo "aws ec2 attach-volume --volume-id ${ZooEBS} --instance-id $my_instance_id --device /dev/xvdh --region ${AWS::Region}" > /etc/default/mount_lvm
            chmod +x /etc/default/mount_lvm
            /etc/default/mount_lvm

            #do some chef things before the cfn-init due to race issues
            /bin/mkdir -p /etc/chef
            /bin/mkdir -p /var/lib/chef
            /bin/mkdir -p /var/log/chef
            /bin/mkdir -p /var/cache/chef
            /usr/sbin/groupadd chef -r
            /usr/sbin/useradd chef -r -s /bin/sh -d /var/lib/chef -g chef

            #install eumc
            aws s3 cp ${EumcScriptPath} /tmp/eumc.sh
            chmod 755 /tmp/eumc.sh
            /tmp/eumc.sh
            #Download rpm from s3
            aws s3 cp ${SecretsRPM} /var/cache/chef/
            rpm -Uvh /var/cache/chef/secrets-cli-*.rpm

            #Download validator.pem s3
            /usr/local/bin/secrets get --region us-west-2 --s3-bucket ${SecretsS3} --secret-name common/fds-qa-validator.pem --output /etc/chef/fds-qa-validator.pem

            #install chef
            if grep -q 'release 7' /etc/redhat-release; then
              rpm -Uvh https://opscode-omnibus-packages.s3.amazonaws.com/el/7/x86_64/chef-12.4.3-1.el7.x86_64.rpm
            else
              rpm -Uvh https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-12.4.3-1.el6.x86_64.rpm
            fi

            chown -R chef /etc/chef/*
            echo 'chef-client -j /etc/chef/first-boot.json -E ${ChefEnvironment} 2>&1 | tee -a /var/log/chef-install.log' > /etc/chef/first.sh
            chmod 755 /etc/chef/first.sh
            /etc/chef/first.sh

            #tune audit.rules - CFAO-5536; cleanup audit.log so the installation logs of every single file doesn't get send to splunk
            #sed -i 's,k delete$,k delete -F dir!=/opt/omd/sites,' /etc/audit/rules.d/audit.rules
            #rm -f /var/log/audit/audit.log*
            # If all went well, signal success

    Type: AWS::AutoScaling::LaunchConfiguration
  EIPAssociation:
    Condition: AssociatePublicIpAddress
    Properties:
      AllocationId:
        Fn::GetAtt:
        - ZooEIP
        - AllocationId
      NetworkInterfaceId:
        Ref: ZooENI
    Type: AWS::EC2::EIPAssociation