AWSTemplateFormatVersion: '2010-09-09'
Description: Add a FDS server ASG to your VPC.
Outputs:
  FDSServerASGName:
    Description: Autoscaling Group for FDS Server.
    Value:
      Ref: FDSServerFleet
Parameters:
  ASGDesired:
    Default: '2'
    Description: FDS Server ASG size
    Type: String
  ASGMax:
    Default: '20'
    Description: FDS Server Max ASG size
    Type: String
  ASGMin:
    Default: '1'
    Description: FDS Server Min ASG size
    Type: String
  AmiId:
    Description: AMI ID
    Type: String
  ChefEnvironment:
    Description: Chef environment.
    Type: String
  ChefRole:
    Description: Chef runlists for the nodes.
    Type: CommaDelimitedList
  ChefServerURL:
    Description: Chef-server URL (including organization).
    Type: String
  EbsVolumeSize:
    Description: Size of EBS Volume.
    Type: String
  EgressProxyHost:
    Description: Egress proxy host
    Type: String
  EgressProxyPort:
    Description: Egress proxy port
    Type: String
  EumcScriptPath:
    Description: Script to install eumc.
    Type: String
  InstanceProfile:
    Description: Instance Profile name
    Type: String
  InstanceType:
    AllowedValues:
    - t2.micro
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: m4.large
    Description: FDS Server EC2 instance type
    Type: String
  KeyName:
    AllowedPattern: '[-_ a-zA-Z0-9]*'
    ConstraintDescription: can contain only alphanumeric characters, spaces, dashes
      and underscores.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
      (use bastion KeyPair if available)
    MaxLength: '64'
    MinLength: '1'
    Type: String
  ResourceName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9-_]*'
    Default: FDSServer
    Description: The Logical Resource Name - commonly set by parent stack
    MaxLength: '128'
    MinLength: '1'
    Type: String
  ScaleDownCPUThreshold:
    Default: '5'
    Description: Average CPU utilization to trigger scaling down
    Type: Number
  ScaleUpCPUThreshold:
    Default: '70'
    Description: Average CPU utilization to trigger scaling up
    Type: Number
  SecretsCmkId:
    Description: ARN of the KMS CMK used to encrypt secrets, reused for chef secrets
    Type: String
  SecretsRPM:
    Description: URL to download Secrets-CLI rpm
    Type: String
  SecretsS3:
    Description: S3 bucket storing Secrets CLI
    Type: String
  SecurityGroups:
    Default: default
    Description: The EC2 security group that this instance belongs to
    Type: CommaDelimitedList
  SubnetIds:
    Description: A list of Subnet IDs to distribute your instances.
    Type: CommaDelimitedList
  VpcId:
    Default: vpc-
    Description: Vpc ID of your existing Virtual Private Cloud (VPC)
    Type: String
  LambdaDnsTopicARN:
    Description: The ARN of the SNS Topic for Lambda DNS
    Type: String
  LambdaDnsTag:
    Description: The tag for Lambda DNS. - format is HostedZoneId:Type:record-name
    Type: String
  AppELBHealthURL:
    Description: Health URL check for load balancer
    Type: String
  ELBSecurityGroup:
    Description: Security groups for load balancer
    Type: CommaDelimitedList
    Default: ''
  ELBSubnetIds:
    Description: subnet ids for load balancer
    Type: List<String>
  CNAMEPrefix:
    Description: prefix for CNAME values
    Type: String
  TagPrefix:
    Description: prefix for environment
    Type: String
  HostedZoneName:
    Description: Route53 Hosted Zone Name
    Type: String
Conditions:
  UsePublicLoadBalancer: !Not [!Equals [!Ref AppELBHealthURL, ""]]
Resources:
  ELBCname:
    Condition: UsePublicLoadBalancer
    Properties:
      HostedZoneName:
        !Join [ '', [ Ref: HostedZoneName, '.' ] ]
      RecordSets:
      - AliasTarget:
          DNSName:
            Fn::GetAtt:
            - PublicELB
            - DNSName
          HostedZoneId:
            Fn::GetAtt:
            - PublicELB
            - CanonicalHostedZoneNameID
        Name:
          Fn::Join:
          - ''
          - - Ref: TagPrefix
            - Ref: CNAMEPrefix
            - Ref: HostedZoneName
            - .
        Type: A
    Type: AWS::Route53::RecordSetGroup
  PublicELB:
    Condition: UsePublicLoadBalancer
    Properties:
      CrossZone: 'true'
      HealthCheck:
        HealthyThreshold: '3'
        Interval: '6'
        Target:
          Fn::Join:
          - ''
          - - HTTPS:8443
            - ''
            - Ref: AppELBHealthURL
        Timeout: '3'
        UnhealthyThreshold: '5'
      Listeners:
      - InstancePort: '8443'
        InstanceProtocol: TCP
        LoadBalancerPort: '443'
        Protocol: TCP
      Scheme: internet-facing
      SecurityGroups:
        Ref: ELBSecurityGroup
      Subnets:
        Ref: ELBSubnetIds
    Type: AWS::ElasticLoadBalancing::LoadBalancer
  FDSServerFleet:
    Properties:
      DesiredCapacity:
        Ref: ASGDesired
      LaunchConfigurationName:
        Ref: FDSServerLaunchConfig
      MaxSize:
        Ref: ASGMax
      MinSize:
        Ref: ASGMin
      LoadBalancerNames:
        Fn::If:
        - UsePublicLoadBalancer
        - - Ref: PublicELB
        - Ref: AWS::NoValue
      Tags:
      - Key: Name
        PropagateAtLaunch: 'true'
        Value:
          Ref: ResourceName
      - Key: Route53
        PropagateAtLaunch: 'true'
        Value:
          Ref: LambdaDnsTag
      VPCZoneIdentifier:
        Ref: SubnetIds
      NotificationConfigurations:
        - NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_TERMINATE
          TopicARN:
            Ref: LambdaDnsTopicARN
    Type: AWS::AutoScaling::AutoScalingGroup
  FDSServerLaunchConfig:
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/chef/client.rb:
              content:
                Fn::Join:
                - ''
                - - chef_server_url "
                  - Ref: ChefServerURL
                  - '"

                    '
                  - 'log_level        :info

                    '
                  - 'log_location     STDOUT

                    '
                  - 'validation_client_name ''fds-qa-validator''

                    '
                  - 'validation_key ''/etc/chef/fds-qa-validator.pem''

                    '
                  - http_proxy "http://
                  - Ref: EgressProxyHost
                  - ':'
                  - Ref: EgressProxyPort
                  - '"

                    '
                  - https_proxy "http://
                  - Ref: EgressProxyHost
                  - ':'
                  - Ref: EgressProxyPort
                  - '"

                    '
                  - 'no_proxy "169.254.169.254,127.0.0.1,.intuit.net"

                    '
                  - 'INSTANCEID=`(curl -s http://169.254.169.254/latest/meta-data/instance-id
                    | sed ''s/^i-//'')`.chomp

                    '
                  - 'AZ=`(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone
                    | awk ''{print substr($0, length($0), 1)}'')`.chomp

                    '
                  - node_name "
                  - Ref: ResourceName
                  - '#{AZ}-#{INSTANCEID}"

                    '
              group: root
              mode: '000644'
              owner: chef
            /etc/chef/first-boot.json:
              content:
                Fn::Join:
                - ''
                - - '{

                    '
                  - '  "run_list": [

                    '
                  - '    "'
                  - Fn::Join:
                    - '","'
                    - Ref: ChefRole
                  - '"

                    '
                  - '  ]

                    '
                  - '}'
              group: root
              mode: '000644'
              owner: chef
            /etc/profile.d/ec2-egress-proxy.sh:
              content:
                Fn::Join:
                - ''
                - - export http_proxy=http://
                  - Ref: EgressProxyHost
                  - ':'
                  - Ref: EgressProxyPort
                  - '

                    '
                  - export https_proxy=http://
                  - Ref: EgressProxyHost
                  - ':'
                  - Ref: EgressProxyPort
                  - '

                    '
                  - 'export no_proxy=169.254.169.254,127.0.0.1,.intuit.net

                    '
              group: root
              mode: '000644'
              owner: root
          packages:
            yum:
              curl: []
              lvm2: []
              ntp: []
              rsync: []
              screen: []
              telnet: []
              wget: []
      Comment1: Configure the bootstrap helpers to install FDS servers
    Properties:
      AssociatePublicIpAddress: 'false'
      BlockDeviceMappings:
      - DeviceName: /dev/xvdz
        Ebs:
          VolumeSize:
            Ref: EbsVolumeSize
      IamInstanceProfile:
        Ref: InstanceProfile
      ImageId:
        Ref: AmiId
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups:
        Ref: SecurityGroups
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '#!/bin/bash -v

              '
            - 'function error_exit

              '
            - '{

              '
            - '  #Cheat

              '
            - '  cfn-signal -e 0 -r "$1" '''
            - Ref: WaitHandle
            - '''

              '
            - '  exit 0

              '
            - '}

              '
            - export http_proxy=http://
            - Ref: EgressProxyHost
            - ':'
            - Ref: EgressProxyPort
            - '

              '
            - export https_proxy=http://
            - Ref: EgressProxyHost
            - ':'
            - Ref: EgressProxyPort
            - '

              '
            - 'export no_proxy=169.254.169.254,127.0.0.1,.intuit.net

              '
            - 'SHORTNAME=`(curl -s http://169.254.169.254/latest/meta-data/local-hostname)`

              '
            - 'LONGNAME="$SHORTNAME.ec2.internal"

              '
            - 'PRIVATE_IPV4=`(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)`

              '
            - 'export HOME=/root

              '
            - '#do some chef things before the cfn-init due to race issues

              '
            - '/bin/mkdir -p /etc/chef

              '
            - '/bin/mkdir -p /var/lib/chef

              '
            - '/bin/mkdir -p /var/log/chef

              '
            - '/bin/mkdir -p /var/cache/chef

              '
            - '/usr/sbin/groupadd chef -r

              '
            - '/usr/sbin/useradd chef -r -s /bin/sh -d /var/lib/chef -g chef

              '
            - 'export PATH=$PATH:/opt/aws/bin

              '
            - 'cfn-init '
            - '    -v -s '
            - Ref: AWS::StackName
            - ' -r FDSServerLaunchConfig '
            - '         --region     '
            - Ref: AWS::Region
            - ' || error_exit ''Failed to run cfn-init''

              '
            - '#install eumc

              '
            - 'aws s3 cp '
            - Ref: EumcScriptPath
            - ' /tmp/eumc.sh

              '
            - 'chmod 755 /tmp/eumc.sh

              '
            - '/tmp/eumc.sh

              '
            - '#Download rpm from s3

              '
            - 'aws s3 cp '
            - Ref: SecretsRPM
            - ' /var/cache/chef/ >> /var/log/chef-install.log 2>&1 || error_exit ''Failed
              to get secrets cli rpm.''

              '
            - 'rpm -Uvh /var/cache/chef/secrets-cli-*.rpm >> /var/log/chef-install.log
              2>&1 || error_exit ''Failed to install secrets cli rpm.''

              '
            - '#Download validator.pem from secrets-cli

              '
            - '/usr/local/bin/secrets get --region us-west-2 --s3-bucket '
            - Ref: SecretsS3
            - ' --secret-name common/fds-qa-validator.pem --output /etc/chef/fds-qa-validator.pem
              >> /var/log/chef-install.log 2>&1 || error_exit ''Failed to get validator.pem
              from secrets-cli.''

              '
            - '# Cheat!!!!

              '
            - '# If all went well, signal success

              '
            - cfn-signal -e 0 -r 'FDS server configuration' '
            - Ref: WaitHandle
            - '''

              '
            - '#install chef

              '
            - 'if grep -q ''release 7'' /etc/redhat-release; then

              '
            - '  rpm -Uvh https://opscode-omnibus-packages.s3.amazonaws.com/el/7/x86_64/chef-12.4.3-1.el7.x86_64.rpm
              >> /var/log/chef-install.log 2>&1 || error_exit ''Failed to install
              chef.''

              '
            - 'else

              '
            - '  rpm -Uvh https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-12.4.3-1.el6.x86_64.rpm
              >> /var/log/chef-install.log 2>&1 || error_exit ''Failed to install
              chef.''

              '
            - 'fi

              '
            - 'chown -R chef /etc/chef/*

              '
            - 'echo ''chef-client -j /etc/chef/first-boot.json -E '
            - Ref: ChefEnvironment
            - ' 2>&1 | tee -a /var/log/chef-install.log'' > /etc/chef/first.sh

              '
            - 'chmod 755 /etc/chef/first.sh

              '
            - '#/etc/chef/first.sh

              '
            - '# If all went well, signal success

              '
            - cfn-signal -e $? -r 'FDS server configuration' '
            - Ref: WaitHandle
            - '''

              '
    Type: AWS::AutoScaling::LaunchConfiguration
  WaitCondition:
    DependsOn: FDSServerFleet
    Properties:
      Handle:
        Ref: WaitHandle
      Timeout: '900'
    Type: AWS::CloudFormation::WaitCondition
  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle