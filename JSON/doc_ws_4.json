{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates a full stack for FDP DocumentService (EC2 AutoScalingGroup ELB)",
  "Metadata": {
    "Name": "DocumentService",
    "Version": "1.1.2"
  },
  "Parameters": {
    "ArtifactBucket": {
      "Description": "ArtifactBucket",
      "Type": "String"
    },
    "ArtifactKey": {
      "Description": "ArtifactKey",
      "Type": "String"
    },
    "ArtifactVersion": {
      "Description": "ArtifactVersion",
      "Type": "String"
    },
    "AppEC2SecurityGroup": {
      "Description": "Comma-separated list of IDs of the security group for the App Tier.",
      "Type": "List<String>"
    },
    "ChefRole": {
      "Description": "Chef runlists for the nodes.",
      "Type": "CommaDelimitedList"
    },
    "ChefEnvironment": {
      "Description": "Chef environment.",
      "Type": "String"
    },
    "ChefServerURL": {
      "Description": "Chef-server URL (including organization).",
      "Type": "String"
    },
    "EbsVolumeSize": {
      "Description": "Size of EBS Volume.",
      "Type": "Number"
    },
    "EumcScriptPath": {
      "Description": "Script to install eumc.",
      "Type": "String"
    },
    "Hosttag": {
      "Description": "Host Tag",
      "Type": "String"
    },
    "IAM": {
      "Description": "Provide the IAM Stack KeyName",
      "Type": "String"
    },
    "ImageId": {
      "Description": "The AMIID for Instance",
      "Type": "AWS::EC2::Image::Id"
    },
    "InstanceType": {
      "Description": "The InstanceType of Instance",
      "Type": "String"
    },
    "KeyName": {
      "Description": "The KeyName associated Instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "MinSize": {
      "Description": "MinSize of Instance",
      "Type": "Number"
    },
    "MaxSize": {
      "Description": "MaxSize of Instance",
      "Type": "Number"
    },
    "ResourceName": {
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9-_]*",
      "Description": "The Logical Resource Name - commonly set by parent stack",
      "MaxLength": "128",
      "MinLength": "1",
      "Type": "String"
    },
    "SecretsRPM": {
      "Description": "URL to download Secrets-CLI rpm",
      "Type": "String"
    },
    "SecretsS3": {
      "Description": "S3 bucket storing Secrets CLI",
      "Type": "String"
    },
    "VPCZoneIdentifier": {
      "Description": "List of VPCZoneIdentifier",
      "Type": "List<String>"
    }
  },
  "Resources": {
    "fdsautoscalingLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/chef/client.rb": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "chef_server_url \"",
                      {
                        "Ref": "ChefServerURL"
                      },
                      "\"\n",
                      "log_level        :info\n",
                      "log_location     STDOUT\n",
                      "validation_client_name 'fds-qa-validator'\n",
                      "validation_key '/etc/chef/fds-qa-validator.pem'\n",
                      "INSTANCEID=`(curl -s http://169.254.169.254/latest/meta-data/instance-id | sed 's/^i-//')`.chomp\n",
                      "AZ=`(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | awk '{print substr($0, length($0), 1)}')`.chomp\n",
                      "node_name \"",
                      {
                        "Ref": "ResourceName"
                      },
                      "#{AZ}-#{INSTANCEID}\"\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000644",
                "owner": "chef"
              },
              "/etc/chef/first-boot.json": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "{\n",
                      "\"doc_app\": {\n",
                      "\"build\": {\n",
                      "\"build_version\": \"0.0.0.0\"\n",
                      "}\n",
                      "}, \n",
                      "  \"run_list\": [\n",
                      "    \"",
                      {
                        "Fn::Join": [
                          "\",\"",
                          {
                            "Ref": "ChefRole"
                          }
                        ]
                      },
                      "\"\n",
                      "  ]\n",
                      "}"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000644",
                "owner": "chef"
              }
            },
            "packages": {
              "yum": {
                "curl": [
                ],
                "lvm2": [
                ],
                "ntp": [
                ],
                "rsync": [
                ],
                "screen": [
                ],
                "telnet": [
                ],
                "wget": [
                ]
              }
            }
          }
        },
        "Comment1": "Configure the bootstrap helpers to install Categorization servers"
      },
      "Properties": {
        "AssociatePublicIpAddress": "false",
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdz",
            "Ebs": {
              "VolumeSize": {
                "Ref": "EbsVolumeSize"
              },
              "VolumeType": "gp2",
              "Encrypted": true
            }
          },
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": 30
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAM"
        },
        "ImageId": {
          "Ref": "ImageId"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": {
          "Ref": "AppEC2SecurityGroup"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "SHORTNAME=`(curl -s http://169.254.169.254/latest/meta-data/local-hostname)`\n",
                "LONGNAME=\"$SHORTNAME.ec2.internal\"\n",
                "PRIVATE_IPV4=`(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)`\n",
                "export HOME=/root\n",
                "#do some chef things before the cfn-init due to race issues\n",
                "/bin/mkdir -p /etc/chef\n",
                "/bin/mkdir -p /var/lib/chef\n",
                "/bin/mkdir -p /var/log/chef\n",
                "/bin/mkdir -p /var/cache/chef\n",
                "/usr/sbin/groupadd chef -r\n",
                "/usr/sbin/useradd chef -r -s /bin/sh -d /var/lib/chef -g chef\n",
                "export PATH=$PATH:/opt/aws/bin\n",
                "cfn-init ",
                "    -v -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r fdsautoscalingLaunchConfiguration ",
                "         --region     ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init'\n",
                "#Download rpm from s3\n",
                "aws s3 cp ",
                {
                  "Ref": "SecretsRPM"
                },
                " /var/cache/chef/ >> /var/log/chef-install.log 2>&1 || error_exit 'Failed to get secrets cli rpm.'\n",
                "rpm -Uvh /var/cache/chef/secrets-cli-*.rpm >> /var/log/chef-install.log 2>&1 || error_exit 'Failed to install secrets cli rpm.'\n",
                "#Download validator.pem from secrets-cli\n",
                "/usr/local/bin/secrets get --region us-west-2 --s3-bucket ",
                {
                  "Ref": "SecretsS3"
                },
                " --secret-name common/fds-qa-validator.pem --output /etc/chef/fds-qa-validator.pem >> /var/log/chef-install.log 2>&1 || error_exit 'Failed to get validator.pem from secrets-cli.'\n",
                "# If all went well, signal success\n",
                "cfn-signal -e $? -r 'DocumentService server configuration' '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n",
                "#install chef\n",
                "if grep -q 'release 7' /etc/redhat-release; then\n",
                "  rpm -Uvh https://opscode-omnibus-packages.s3.amazonaws.com/el/7/x86_64/chef-12.4.3-1.el7.x86_64.rpm >> /var/log/chef-install.log 2>&1 || error_exit 'Failed to install chef.'\n",
                "else\n",
                "  rpm -Uvh https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-12.4.3-1.el6.x86_64.rpm >> /var/log/chef-install.log 2>&1 || error_exit 'Failed to install chef.'\n",
                "fi\n",
                "chown -R chef /etc/chef/*\n",
                "echo 'chef-client -j /etc/chef/first-boot.json -E ",
                {
                  "Ref": "ChefEnvironment"
                },
                " 2>&1 | tee -a /var/log/chef-install.log' > /etc/chef/first.sh\n",
                "'for i in {1..20}; do sleep 60s; done' > /etc/chef/first1.sh\n",
                "chmod 755 /etc/chef/first.sh\n",
                "chmod 755 /etc/chef/first1.sh\n",
                "/etc/chef/first.sh\n",
                "/etc/chef/first1.sh\n",
                "sleep 60s\n",
                "rm -rf /etc/profile.d/ec2-egress-proxy.sh\n",
                "/sbin/service tomcat start ",
                "# If all went well, signal success\n",
                "cfn-signal -e $? -r 'FDS server configuration' '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n"
              ]
            ]
          }
        }
      },
    },
    "WaitCondition": {
      "DependsOn": "fdsautoscalingLaunchConfiguration",
      "Properties": {
        "Handle": {
          "Ref": "WaitHandle"
        },
        "Timeout": "1500"
      },
      "Type": "AWS::CloudFormation::WaitCondition"
    },
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },

    "fdsautoscaling": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": {
          "Ref": "VPCZoneIdentifier"
        },
        "MinSize": {
          "Ref": "MinSize"
        },
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "LaunchConfigurationName": {
          "Ref": "fdsautoscalingLaunchConfiguration"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "Hosttag"
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    }
  },
  
  "Outputs": {
    "fdspublicelb": {
      "Description": "fdspublicelb for stack",
      "Value": "fdspublicelb"
    },
    "fdsautoscalingLaunchConfiguration": {
      "Description": "fdsautoscalingLaunchConfiguration for stack",
      "Value": "fdsautoscalingLaunchConfiguration"
    },
    "fdsautoscaling": {
      "Description": "fdsautoscalingLaunchConfiguration for stack",
      "Value": "fdsautoscalingLaunchConfiguration"
    }
  }
}